------- FILE animation_test.s LEVEL 1 PASS 2
      1  1120					      processor	6502
      2  1120 ????
      3  1120 ????						;   KERNAL [sic] routines
      4  1120 ????						;   zero PAGE USage
      5  1120 ????						;   20:current status(idle/left/right + frame/1/2)
      6  1120 ????						; not frame 1: 0
      7  1120 ????						; idle frame 1: 1
      8  1120 ????						; left frame 1: 2
      9  1120 ????						; right frame 1: 3
     10  1120 ????						; memo: 5bits remaining
     11  1120 ????						;   21: x movement
     12  1120 ????						;   22: y movement
     13  1001					      org	$1001
     14  1001		       0b 10		      dc.w	stubend
     15  1003		       39 30		      dc.w	12345
     16  1005		       9e 34 31 30*	      dc.b	$9e, "4109", 0
     17  100b				   stubend
     18  100b		       00 00		      dc.w	0
     19  100d
     20  100d				   main
     21  100d		       20 e2 10 	      jsr	clear_screen
     22  1010
     23  1010							;start top half location
     24  1010		       a9 e6		      lda	#$e6
     25  1012		       85 21		      sta	$21
     26  1014		       a9 1e		      lda	#$1e
     27  1016		       85 22		      sta	$22
     28  1018		       a9 e6		      lda	#$e6
     29  101a		       85 23		      sta	$23
     30  101c		       a9 96		      lda	#$96
     31  101e		       85 24		      sta	$24
     32  1020
     33  1020
     34  1020				   main_loop
     35  1020
     36  1020		       a5 c5		      lda	$00C5	; loads the current pressed key from memory
     37  1022
     38  1022				   case_fall
     39  1022		       c9 29		      cmp	#41	;if s is presssed "test stage design)
     40  1024		       d0 0f		      bne	case_rise
     41  1026		       a9 79		      lda	#121
     42  1028		       85 00		      sta	$0
     43  102a		       a9 30		      lda	#48
     44  102c		       85 01		      sta	$1
     45  102e		       a9 00		      lda	#0
     46  1030		       85 20		      sta	$20
     47  1032		       4c c5 10 	      jmp	main_loop_finishing
     48  1035				   case_rise
     49  1035		       c9 09		      cmp	#9	;if w is pressed
     50  1037		       d0 0f		      bne	case_left
     51  1039		       a9 78		      lda	#120
     52  103b		       85 00		      sta	$0
     53  103d		       a9 30		      lda	#48
     54  103f		       85 01		      sta	$1
     55  1041		       a9 00		      lda	#0
     56  1043		       85 20		      sta	$20
     57  1045		       4c c5 10 	      jmp	main_loop_finishing
     58  1048				   case_left
     59  1048		       c9 11		      cmp	#17	; if A is pressed
     60  104a		       d0 09		      bne	case_right
     61  104c		       a5 20		      lda	$20
     62  104e		       c9 02		      cmp	#2	;now is in left frame1->switch frame2
     63  1050		       f0 28		      beq	left_f2
     64  1052		       4c 6b 10 	      jmp	left_f1
     65  1055				   case_right
     66  1055		       c9 12		      cmp	#18	; if D is pressed
     67  1057		       d0 09		      bne	case_idle
     68  1059		       a5 20		      lda	$20
     69  105b		       c9 03		      cmp	#3	;now is in left frame1->switch frame2
     70  105d		       f0 39		      beq	right_f2
     71  105f		       4c 89 10 	      jmp	right_f1
     72  1062				   case_idle
     73  1062		       a5 20		      lda	$20
     74  1064		       c9 01		      cmp	#1	;now is in idle frame1->switch frame2
     75  1066		       f0 4e		      beq	idle_f2
     76  1068		       4c a7 10 	      jmp	idle_f1
     77  106b				   left_f1
     78  106b		       a9 73		      lda	#115
     79  106d		       85 00		      sta	$0
     80  106f		       a9 31		      lda	#'1
     81  1071		       85 01		      sta	$1
     82  1073		       a9 02		      lda	#2
     83  1075		       85 20		      sta	$20
     84  1077		       4c c5 10 	      jmp	main_loop_finishing
     85  107a				   left_f2
     86  107a		       a9 74		      lda	#116
     87  107c		       85 00		      sta	$0
     88  107e		       a9 32		      lda	#'2
     89  1080		       85 01		      sta	$1
     90  1082		       a9 00		      lda	#0
     91  1084		       85 20		      sta	$20
     92  1086		       4c c5 10 	      jmp	main_loop_finishing
     93  1089				   right_f1
     94  1089		       a9 6b		      lda	#107
     95  108b		       85 00		      sta	$0
     96  108d		       a9 31		      lda	#'1
     97  108f		       85 01		      sta	$1
     98  1091		       a9 03		      lda	#3
     99  1093		       85 20		      sta	$20
    100  1095		       4c c5 10 	      jmp	main_loop_finishing
    101  1098				   right_f2
    102  1098		       a9 76		      lda	#118
    103  109a		       85 00		      sta	$0
    104  109c		       a9 32		      lda	#'2
    105  109e		       85 01		      sta	$1
    106  10a0		       a9 00		      lda	#0
    107  10a2		       85 20		      sta	$20
    108  10a4		       4c c5 10 	      jmp	main_loop_finishing
    109  10a7				   idle_f1
    110  10a7		       a9 45		      lda	#69
    111  10a9		       85 00		      sta	$0
    112  10ab		       a9 31		      lda	#'1
    113  10ad		       85 01		      sta	$1
    114  10af		       a9 01		      lda	#1
    115  10b1		       85 20		      sta	$20
    116  10b3		       4c c5 10 	      jmp	main_loop_finishing
    117  10b6				   idle_f2
    118  10b6		       a9 46		      lda	#70
    119  10b8		       85 00		      sta	$0
    120  10ba		       a9 32		      lda	#'2
    121  10bc		       85 01		      sta	$1
    122  10be		       a9 00		      lda	#0
    123  10c0		       85 20		      sta	$20
    124  10c2		       4c c5 10 	      jmp	main_loop_finishing
    125  10c5				   main_loop_finishing
    126  10c5							;drawing characters to the location
    127  10c5		       a5 00		      lda	$0
    128  10c7		       a0 00		      ldy	#$0
    129  10c9		       91 21		      sta	($21),y
    130  10cb		       a5 01		      lda	$1
    131  10cd		       a0 16		      ldy	#$16
    132  10cf		       91 21		      sta	($21),y
    133  10d1
    134  10d1							;drawing character with color
    135  10d1		       a9 02		      lda	#$2
    136  10d3		       a0 00		      ldy	#$0
    137  10d5		       91 23		      sta	($23),y
    138  10d7		       a0 16		      ldy	#$16
    139  10d9		       91 23		      sta	($23),y
    140  10db		       20 fd 10 	      jsr	interval_start
    141  10de		       4c 20 10 	      jmp	main_loop
    142  10e1				   exit_prg
    143  10e1		       60		      rts
    144  10e2
    145  10e2
    146  10e2							;function:clear screen
    147  10e2				   clear_screen
    148  10e2		       a9 00		      lda	#0
    149  10e4		       a2 00		      ldx	#0
    150  10e6				   clear_char
    151  10e6		       9d 00 1e 	      STA	$1e00,X
    152  10e9		       9d 00 1f 	      STA	$1f00,X
    153  10ec		       e8		      INX
    154  10ed		       d0 f7		      BNE	clear_char
    155  10ef
    156  10ef		       a9 01		      lda	#01
    157  10f1		       a2 00		      ldx	#0
    158  10f3				   white_color
    159  10f3		       9d 00 96 	      STA	$9600,X
    160  10f6		       9d ff 96 	      STA	$96ff,x
    161  10f9		       e8		      INX
    162  10fa		       d0 f7		      BNE	white_color
    163  10fc		       60		      rts
    164  10fd							;function:clear screen end
    165  10fd
    166  10fd							;loopoverdelay255
    167  10fd				   interval_start
    168  10fd		       a9 00		      lda	#$0
    169  10ff		       85 11		      sta	$11
    170  1101				   interval_loop
    171  1101		       a5 11		      lda	$11
    172  1103		       c9 0a		      cmp	#$0a
    173  1105		       f0 08		      beq	interval_done
    174  1107		       e6 11		      inc	$11
    175  1109		       20 10 11 	      jsr	delay255_start
    176  110c		       4c 01 11 	      jmp	interval_loop
    177  110f				   interval_done
    178  110f		       60		      rts
    179  1110
    180  1110							;delay loop
    181  1110				   delay255_start
    182  1110		       a9 00		      lda	#$0
    183  1112		       85 01		      sta	$01
    184  1114				   delay255_loop
    185  1114		       a5 01		      lda	$01
    186  1116		       c9 ff		      cmp	#$FF
    187  1118		       f0 05		      beq	delay255_done
    188  111a		       e6 01		      inc	$01
    189  111c		       4c 14 11 	      jmp	delay255_loop
    190  111f				   delay255_done
    191  111f		       60		      rts
    192  1120
    193  1120							;include "shift_on_monitor.s"
    194  1120							;include "tempChars.s"
