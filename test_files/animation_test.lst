------- FILE animation_test.s LEVEL 1 PASS 2
      1  1139					      processor	6502
      2  113a ????
      3  113a ????						;   KERNAL [sic] routines
      4  113a ????	       32 33 34 35 IDLE_TOP_1 =	"12345"
      5  113a ????	       32 33 34 35 IDLE_TOP_2 =	"12345"
      6  113a ????	       32 33 34 35 LEFT_TOP_1 =	"12345"
      7  113a ????	       32 33 34 35 LEFT_TOP_2 =	"12345"
      8  113a ????	       32 33 34 35 RIGHT_TOP_1 =	"12345"
      9  113a ????	       32 33 34 35 RIGHT_TOP_2 =	"12345"
     10  113a ????						;   zero PAGE USage
     11  113a ????						;   20:current status(idle/left/right + frame/1/2)
     12  113a ????						; idle frame 1/2: 0/1
     13  113a ????						; left frame 1/2: 2/3
     14  113a ????						; right frame 1/2: 4/5
     15  113a ????						;   21: x movement
     16  113a ????						;   22: y movement
     17  1001					      org	$1001
     18  1001		       0b 10		      dc.w	stubend
     19  1003		       39 30		      dc.w	12345
     20  1005		       9e 34 31 30*	      dc.b	$9e, "4109", 0
     21  100b				   stubend
     22  100b		       00 00		      dc.w	0
     23  100d
     24  100d				   main
     25  100d		       20 1d 11 	      jsr	store_char
     26  1010		       20 df 10 	      jsr	clear_screen
     27  1013
     28  1013							;charcterset to from 1c00
     29  1013		       a9 ff		      lda	#255
     30  1015		       8d 05 90 	      sta	$9005
     31  1018
     32  1018							;start location
     33  1018		       a9 01		      lda	#1
     34  101a		       85 21		      sta	$21
     35  101c		       a9 01		      lda	#1
     36  101e		       85 22		      sta	$22
     37  1020
     38  1020				   main_loop
     39  1020		       20 98 10 	      jsr	shift_on_monitor
     40  1023		       a9 00		      lda	#0
     41  1025		       a0 00		      ldy	#0
     42  1027		       91 02		      sta	($02),y
     43  1029		       91 04		      sta	($04),y
     44  102b
     45  102b							;jmp	  s_down       ;test purpose
     46  102b		       a5 c5		      lda	$00C5	; loads the current pressed key from memory
     47  102d
     48  102d		       c9 40		      cmp	#64	;if nothing held down
     49  102f		       f0 16		      beq	case_idle
     50  1031		       c9 11		      cmp	#17	; if A is pressed
     51  1033		       f0 15		      beq	a_left
     52  1035		       c9 12		      cmp	#18	; if D is pressed
     53  1037		       f0 1c		      beq	d_right
     54  1039		       c9 09		      cmp	#9	;if W is pressed
     55  103b		       f0 23		      beq	w_top
     56  103d		       c9 29		      cmp	#41	;if S is pressed
     57  103f		       f0 2a		      beq	s_down
     58  1041		       c9 21		      cmp	#33
     59  1043		       f0 52		      beq	exit_prg
     60  1045				   main_update_shift
     61  1045		       a5 20		      lda	$20
     62  1047				   case_idle
     63  1047							;coordinate not updated
     64  1047		       4c 76 10 	      jmp	main_update_shift_end
     65  104a				   a_left
     66  104a							;check if x<1
     67  104a		       a5 21		      lda	$21
     68  104c		       c9 01		      cmp	#1
     69  104e		       90 f7		      bcc	case_idle	;tooleft,cannotmove
     70  1050		       c6 21		      dec	$21
     71  1052		       4c 76 10 	      jmp	main_update_shift_end
     72  1055				   d_right
     73  1055							;check if x> 20 => 20< X (21 is maximum)
     74  1055		       a9 14		      lda	#20
     75  1057		       c5 21		      cmp	$21
     76  1059		       90 ec		      bcc	case_idle	;too right
     77  105b		       e6 21		      inc	$21
     78  105d		       4c 76 10 	      jmp	main_update_shift_end
     79  1060				   w_top
     80  1060							;check y <1
     81  1060		       a5 22		      lda	$22
     82  1062		       c9 01		      cmp	#1
     83  1064		       90 e1		      bcc	case_idle	;too top
     84  1066		       c6 22		      dec	$22
     85  1068		       4c 76 10 	      jmp	main_update_shift_end
     86  106b				   s_down
     87  106b							;check if y>21 => 21<y (22 is maximum)
     88  106b		       a9 15		      lda	#21
     89  106d		       c5 22		      cmp	$22
     90  106f		       90 d6		      bcc	case_idle	;too bottom
     91  1071		       e6 22		      inc	$22
     92  1073		       4c 76 10 	      jmp	main_update_shift_end
     93  1076				   main_update_shift_end
     94  1076		       20 98 10 	      jsr	shift_on_monitor
     95  1079		       a4 00		      ldy	0
     96  107b		       a9 01		      lda	#01	;a squre
     97  107d		       91 02		      sta	($02),y
     98  107f		       a9 02		      lda	#02	;color red
     99  1081		       91 04		      sta	($04),y
    100  1083		       20 fa 10 	      jsr	interval_start
    101  1086				   temp_debug_flag
    102  1086		       20 98 10 	      jsr	shift_on_monitor
    103  1089		       a9 00		      lda	#0
    104  108b		       a0 00		      ldy	#0
    105  108d		       91 02		      sta	($02),y
    106  108f		       91 04		      sta	($04),y
    107  1091		       4c 86 10 	      jmp	temp_debug_flag
    108  1094		       4c 20 10 	      jmp	main_loop
    109  1097				   exit_prg
    110  1097		       60		      rts
    111  1098
    112  1098
    113  1098
    114  1098
    115  1098							;take take y@[22],x@[21],store to [01][00] as shift,
    116  1098							;[03][02] as character movment, [05][04]as screen color movment
    117  1098				   shift_on_monitor
    118  1098		       a5 21		      lda	$21
    119  109a		       85 03		      sta	$03	;->xto[3]
    120  109c		       a5 22		      lda	$22
    121  109e		       85 04		      sta	$04	; -> y to [4]
    122  10a0		       a9 00		      lda	#$00
    123  10a2		       85 01		      sta	$01
    124  10a4		       85 00		      sta	$00
    125  10a6				   som_loop
    126  10a6				   som_y
    127  10a6		       a5 04		      lda	$04
    128  10a8		       c9 00		      cmp	#$0
    129  10aa		       f0 12		      beq	som_x
    130  10ac		       18		      clc
    131  10ad		       a9 16		      lda	#22
    132  10af		       65 00		      adc	$0
    133  10b1		       85 00		      sta	$0
    134  10b3
    135  10b3		       a5 01		      lda	$01
    136  10b5		       69 00		      adc	#$0
    137  10b7		       85 01		      sta	$01
    138  10b9
    139  10b9		       c6 04		      dec	$04
    140  10bb		       4c a6 10 	      jmp	som_y
    141  10be				   som_x
    142  10be		       18		      clc
    143  10bf		       a5 03		      lda	$03
    144  10c1		       65 00		      adc	$0
    145  10c3		       85 00		      sta	$0
    146  10c5		       a5 01		      lda	$01
    147  10c7		       69 00		      adc	#$0
    148  10c9		       85 01		      sta	$01
    149  10cb
    150  10cb							;calculate movement of characters
    151  10cb							;not out of border is assumend
    152  10cb							;last 2 digit always 0
    153  10cb		       a5 00		      lda	$00
    154  10cd		       85 02		      sta	$02
    155  10cf		       85 04		      sta	$04
    156  10d1		       18		      clc
    157  10d2
    158  10d2		       a9 1e		      lda	#$1e
    159  10d4		       65 01		      adc	$01
    160  10d6		       85 03		      sta	$03
    161  10d8
    162  10d8		       a9 96		      lda	#$96
    163  10da		       65 01		      adc	$01
    164  10dc		       85 05		      sta	$05
    165  10de		       60		      rts
    166  10df
    167  10df							;function:clear screen
    168  10df				   clear_screen
    169  10df		       a9 00		      lda	#0
    170  10e1		       a2 00		      ldx	#0
    171  10e3				   clear_char
    172  10e3		       9d 00 1e 	      STA	$1e00,X
    173  10e6		       9d 00 1f 	      STA	$1f00,X
    174  10e9		       e8		      INX
    175  10ea		       d0 f7		      BNE	clear_char
    176  10ec
    177  10ec		       a9 01		      lda	#01
    178  10ee		       a2 00		      ldx	#0
    179  10f0				   white_color
    180  10f0		       9d 00 96 	      STA	$9600,X
    181  10f3		       9d ff 96 	      STA	$96ff,x
    182  10f6		       e8		      INX
    183  10f7		       d0 f7		      BNE	white_color
    184  10f9		       60		      rts
    185  10fa							;function:clear screen end
    186  10fa
    187  10fa							;loopoverdelay255
    188  10fa				   interval_start
    189  10fa		       a9 00		      lda	#$0
    190  10fc		       85 11		      sta	$11
    191  10fe				   interval_loop
    192  10fe		       a5 11		      lda	$11
    193  1100		       c9 2f		      cmp	#$2f
    194  1102		       f0 08		      beq	interval_done
    195  1104		       e6 11		      inc	$11
    196  1106		       20 0d 11 	      jsr	delay255_start
    197  1109		       4c fe 10 	      jmp	interval_loop
    198  110c				   interval_done
    199  110c		       60		      rts
    200  110d
    201  110d							;delay loop
    202  110d				   delay255_start
    203  110d		       a9 00		      lda	#$0
    204  110f		       85 01		      sta	$01
    205  1111				   delay255_loop
    206  1111		       a5 01		      lda	$01
    207  1113		       c9 ff		      cmp	#$FF
    208  1115		       f0 05		      beq	delay255_done
    209  1117		       e6 01		      inc	$01
    210  1119		       4c 11 11 	      jmp	delay255_loop
    211  111c				   delay255_done
    212  111c		       60		      rts
    213  111d
    214  111d							;include "shift_on_monitor.s"
    215  111d							;include "tempChars.s"
    216  111d				   store_char
    217  111d		       a2 00		      ldx	#$0
    218  111f		       a9 00		      lda	#$0
    219  1121				   char1
    220  1121		       e0 08		      cpx	#8
    221  1123		       f0 07		      beq	char2
    222  1125		       9d 00 1c 	      sta	$1c00,x
    223  1128		       e8		      inx
    224  1129		       4c 21 11 	      jmp	char1
    225  112c				   char2
    226  112c		       a9 ff		      lda	#$ff
    227  112e		       e0 10		      cpx	#16
    228  1130		       f0 07		      beq	store_char_end
    229  1132		       9d 00 1c 	      sta	$1c00,x
    230  1135		       e8		      inx
    231  1136		       4c 2c 11 	      jmp	char2
    232  1139				   store_char_end
    233  1139		       60		      rts
