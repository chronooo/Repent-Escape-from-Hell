------- FILE jumpingtest.s LEVEL 1 PASS 2
      1  121e					      processor	6502
      2  121f ????
      3  121f ????						;   jumpting test developed based on moving test.
      4  121f ????						;   Usage:
      5  121f ????						;W: jump to air without crashing with anything
      6  121f ????						;S: crash to a virual celing 2 squares above
      7  121f ????						;how finish collision?
      8  121f ????						;Z: exit
      9  121f ????
     10  121f ????						;   temporarily zeropage usage,
     11  121f ????						;   19: (12,10) is an obstacle flag, will be fixed after collision problem is solved.
     12  121f ????						;   zero PAGE USage
     13  121f ????						;   20:current status(idle/left/right + frame/1/2)
     14  121f ????						; ******XX
     15  121f ????						; not frame 1: 0
     16  121f ????						; idle frame 1: 1
     17  121f ????						; left frame 1: 2
     18  121f ????						; right frame 1: 3
     19  121f ????						;*****X**
     20  121f ????						; falling flag: 0 is not falling (either jumping to air or waling on ground)m
     21  121f ????						; memo: 5 bits remaining
     22  121f ????						;   21: x movement
     23  121f ????						;   22: y movement
     24  121f ????						;   23: vertical speed
     25  1001					      org	$1001
     26  1001		       0b 10		      dc.w	stubend
     27  1003		       39 30		      dc.w	12345
     28  1005		       9e 34 31 30*	      dc.b	$9e, "4109", 0
     29  100b				   stubend
     30  100b		       00 00		      dc.w	0
     31  100d
     32  100d				   main
     33  100d		       20 1b 11 	      jsr	startup
     34  1010				   main_loop
     35  1010		       20 8e 11 	      jsr	player_location
     36  1013		       a9 00		      lda	#$0
     37  1015		       a0 00		      ldy	#$0
     38  1017		       91 02		      sta	($02),y
     39  1019		       91 04		      sta	($04),y
     40  101b		       a0 16		      ldy	#$16
     41  101d		       91 02		      sta	($02),y
     42  101f		       91 04		      sta	($04),y
     43  1021
     44  1021		       a5 c5		      lda	$00C5	; loads the current pressed key from memory
     45  1023				   keyboard_triggers
     46  1023		       c9 11		      cmp	#17	; if A is pressed
     47  1025		       f0 17		      beq	a_left
     48  1027		       c9 12		      cmp	#18	; if D is pressed
     49  1029		       f0 1e		      beq	d_right
     50  102b		       c9 09		      cmp	#9	;if W is pressed
     51  102d		       f0 25		      beq	w_jump
     52  102f		       c9 29		      cmp	#41	;if S is pressed
     53  1031		       f0 4c		      beq	s_down
     54  1033		       c9 21		      cmp	#33
     55  1035		       f0 03		      beq	exit_prg	; if z is pressed
     56  1037		       4c 3b 10 	      jmp	case_idle
     57  103a				   exit_prg
     58  103a		       60		      rts
     59  103b
     60  103b				   case_idle
     61  103b							;coordinate not updated
     62  103b		       4c 8f 10 	      jmp	vertical_movement
     63  103e				   a_left
     64  103e							;check if x<1
     65  103e		       a5 21		      lda	$21
     66  1040		       c9 01		      cmp	#1
     67  1042		       90 f7		      bcc	case_idle	;tooleft,cannotmove
     68  1044		       c6 21		      dec	$21
     69  1046		       4c 8f 10 	      jmp	vertical_movement
     70  1049				   d_right
     71  1049							;check if x> 20 => 20< X (21 is maximum)
     72  1049		       a9 14		      lda	#20
     73  104b		       c5 21		      cmp	$21
     74  104d		       90 ec		      bcc	case_idle	;too right
     75  104f		       e6 21		      inc	$21
     76  1051		       4c 8f 10 	      jmp	vertical_movement
     77  1054				   w_jump
     78  1054							;if 2 squares below is on ground, and falling flag is 1,
     79  1054							;set falling flag to be 0 and initial vertical speed.
     80  1054							;check 2 squares from head below is ground or not.
     81  1054		       a5 21		      lda	$21
     82  1056		       85 00		      sta	$0
     83  1058		       a5 22		      lda	$22
     84  105a		       18		      clc
     85  105b		       69 02		      adc	#2
     86  105d		       85 01		      sta	$1
     87  105f		       20 9a 11 	      jsr	shift_on_monitor
     88  1062		       a0 00		      ldy	#$0
     89  1064		       b1 04		      lda	($04),y
     90  1066		       c9 05		      cmp	#05	;use color for verifying ground at the moment
     91  1068		       d0 12		      bne	w_jump_verification_done
     92  106a							;check falling flag
     93  106a		       a9 04		      lda	#%00000100
     94  106c		       25 20		      and	$20
     95  106e		       c9 04		      cmp	#%00000100
     96  1070		       d0 0a		      bne	w_jump_verification_done
     97  1072							;set up jump flag and initial vertical speed
     98  1072		       a9 fb		      lda	#%11111011
     99  1074		       25 20		      and	$20
    100  1076		       85 20		      sta	$20
    101  1078		       a9 02		      lda	#2
    102  107a		       85 23		      sta	$23
    103  107c				   w_jump_verification_done
    104  107c		       4c 8f 10 	      jmp	vertical_movement
    105  107f
    106  107f				   s_down
    107  107f							;used for reset
    108  107f		       a9 00		      lda	#0
    109  1081		       85 21		      sta	$21
    110  1083		       a9 0c		      lda	#12
    111  1085		       85 22		      sta	$22
    112  1087		       a9 04		      lda	#%00000100
    113  1089		       85 20		      sta	$20	;reset jump flag
    114  108b		       a9 00		      lda	#0
    115  108d		       85 23		      sta	$23
    116  108f
    117  108f
    118  108f				   vertical_movement
    119  108f				   revise_vertical_speed
    120  108f							;   check is jumping
    121  108f		       a9 04		      lda	#%00000100
    122  1091		       25 20		      and	$20
    123  1093		       c9 04		      cmp	#%00000100
    124  1095		       f0 48		      beq	revise_vertical_falling_speed
    125  1097							;case jumping
    126  1097		       a5 23		      lda	$23
    127  1099		       c9 00		      cmp	#0	;change to fall when vertical spped is 0
    128  109b		       f0 35		      beq	stop_jumping
    129  109d		       a5 22		      lda	$22
    130  109f		       c9 00		      cmp	#0	;change to fall when at top border
    131  10a1		       f0 2f		      beq	stop_jumping
    132  10a3
    133  10a3				   on_top_checking
    134  10a3		       a2 00		      ldx	#0
    135  10a5				   on_top_checking_loop
    136  10a5		       4c c7 10 	      jmp	normal_jumping
    137  10a8		       e4 23		      cpx	$23
    138  10aa		       f0 1b		      beq	normal_jumping
    139  10ac							;update y for shift on monitor
    140  10ac		       86 00		      stx	$0
    141  10ae		       a5 22		      lda	$22
    142  10b0		       e5 00		      sbc	$0
    143  10b2		       85 01		      sta	$1
    144  10b4							;x for shift on monitor
    145  10b4		       a5 21		      lda	$21
    146  10b6		       85 00		      sta	$0
    147  10b8		       20 9a 11 	      jsr	shift_on_monitor
    148  10bb
    149  10bb		       a0 00		      ldy	#$0
    150  10bd		       b1 04		      lda	($04),y
    151  10bf		       c9 01		      cmp	#01	;use color for verifying ground at the moment
    152  10c1		       d0 09		      bne	crashed_jumping
    153  10c3		       e8		      inx
    154  10c4		       4c a5 10 	      jmp	on_top_checking_loop
    155  10c7				   normal_jumping
    156  10c7		       c6 23		      dec	$23
    157  10c9		       4c dc 10 	      jmp	revise_vertical_jumping_done
    158  10cc				   crashed_jumping
    159  10cc		       ca		      dex		;can only jump to the squre next to obstacle
    160  10cd		       86 23		      stx	$23
    161  10cf		       4c dc 10 	      jmp	revise_vertical_jumping_done
    162  10d2				   stop_jumping
    163  10d2		       a9 04		      lda	#%00000100
    164  10d4		       05 20		      ora	$20
    165  10d6		       85 20		      sta	$20
    166  10d8		       a9 00		      lda	#0
    167  10da		       85 23		      sta	$23
    168  10dc				   revise_vertical_jumping_done
    169  10dc		       4c df 10 	      jmp	main_update_vertical_shift
    170  10df				   revise_vertical_falling_speed
    171  10df
    172  10df				   main_update_vertical_shift
    173  10df							;is vertical speed 0?
    174  10df		       a5 23		      lda	$23
    175  10e1		       c9 00		      cmp	#0
    176  10e3		       f0 19		      beq	main_update_shift_end
    177  10e5							;falling or jumping?
    178  10e5		       a9 04		      lda	#%00000100
    179  10e7		       25 20		      and	$20
    180  10e9		       c9 00		      cmp	#%00000000
    181  10eb		       d0 0a		      bne	update_vertical_shift_falling
    182  10ed							;case jumping
    183  10ed		       18		      clc
    184  10ee		       a5 22		      lda	$22
    185  10f0		       e5 23		      sbc	$23
    186  10f2		       85 22		      sta	$22
    187  10f4		       4c fe 10 	      jmp	main_update_shift_end
    188  10f7				   update_vertical_shift_falling
    189  10f7		       18		      clc
    190  10f8		       a5 23		      lda	$23
    191  10fa		       65 22		      adc	$22
    192  10fc		       85 22		      sta	$22
    193  10fe
    194  10fe				   main_update_shift_end
    195  10fe		       20 8e 11 	      jsr	player_location
    196  1101		       a0 00		      ldy	#$0
    197  1103		       a9 01		      lda	#01	;a squre
    198  1105		       91 02		      sta	($02),y
    199  1107		       a0 16		      ldy	#$16
    200  1109		       91 02		      sta	($02),y
    201  110b
    202  110b		       a9 02		      lda	#02	;color red
    203  110d		       a0 00		      ldy	#$0
    204  110f		       91 04		      sta	($04),y
    205  1111		       a0 16		      ldy	#$16
    206  1113		       91 04		      sta	($04),y
    207  1115
    208  1115		       20 fc 11 	      jsr	interval_start
    209  1118		       4c 10 10 	      jmp	main_loop
    210  111b
    211  111b							;=====================================
    212  111b							;    tempordary code for jumping and falling tests
    213  111b							;=====================================
    214  111b				   startup
    215  111b
    216  111b							;charcterset to from 1c00
    217  111b		       a9 ff		      lda	#255
    218  111d		       8d 05 90 	      sta	$9005
    219  1120
    220  1120		       20 71 11 	      jsr	store_char
    221  1123		       20 e1 11 	      jsr	clear_screen
    222  1126
    223  1126
    224  1126
    225  1126				   draw_an_obstacle
    226  1126		       a9 0c		      lda	#12
    227  1128		       85 00		      sta	$00
    228  112a		       a9 0a		      lda	#10
    229  112c		       85 01		      sta	$01
    230  112e		       20 9a 11 	      jsr	shift_on_monitor
    231  1131		       a0 00		      ldy	#$0
    232  1133		       a9 01		      lda	#01	;a squre
    233  1135		       91 02		      sta	($02),y
    234  1137		       a9 06		      lda	#06	;color orange
    235  1139		       a0 00		      ldy	#$0
    236  113b		       91 04		      sta	($04),y
    237  113d		       a0 16		      ldy	#$16
    238  113f		       91 04		      sta	($04),y
    239  1141
    240  1141				   drawing_ground
    241  1141		       a2 00		      ldx	#0
    242  1143				   drawing_ground_loop
    243  1143		       a9 0e		      lda	#14
    244  1145		       85 01		      sta	$01
    245  1147		       e0 14		      cpx	#20
    246  1149		       f0 15		      beq	drawing_ground_done
    247  114b		       86 00		      stx	$00
    248  114d		       20 9a 11 	      jsr	shift_on_monitor
    249  1150		       a0 00		      ldy	#$0
    250  1152		       a9 01		      lda	#01	;a squre
    251  1154		       91 02		      sta	($02),y
    252  1156		       a9 05		      lda	#05	;color green
    253  1158		       a0 00		      ldy	#$0
    254  115a		       91 04		      sta	($04),y
    255  115c		       e8		      inx
    256  115d		       4c 43 11 	      jmp	drawing_ground_loop
    257  1160				   drawing_ground_done
    258  1160
    259  1160							;start location
    260  1160		       a9 0c		      lda	#12
    261  1162		       85 21		      sta	$21
    262  1164		       a9 0c		      lda	#12
    263  1166		       85 22		      sta	$22
    264  1168		       a9 04		      lda	#%00000100
    265  116a		       85 20		      sta	$20
    266  116c		       a9 00		      lda	#0
    267  116e		       85 23		      sta	$23
    268  1170		       60		      rts
    269  1171
    270  1171							;============================
    271  1171				   store_char
    272  1171		       a2 00		      ldx	#$0
    273  1173		       a9 00		      lda	#$0
    274  1175				   char1
    275  1175		       e0 08		      cpx	#8
    276  1177		       f0 07		      beq	char2
    277  1179		       9d 00 1c 	      sta	$1c00,x
    278  117c		       e8		      inx
    279  117d		       4c 75 11 	      jmp	char1
    280  1180				   char2
    281  1180		       a9 ff		      lda	#$ff
    282  1182		       e0 10		      cpx	#16
    283  1184		       f0 07		      beq	store_char_end
    284  1186		       9d 00 1c 	      sta	$1c00,x
    285  1189		       e8		      inx
    286  118a		       4c 80 11 	      jmp	char2
    287  118d				   store_char_end
    288  118d		       60		      rts
    289  118e
    290  118e							;=====================================
    291  118e							;player location
    292  118e				   player_location
    293  118e		       a5 21		      lda	$21
    294  1190		       85 00		      sta	$00
    295  1192		       a5 22		      lda	$22
    296  1194		       85 01		      sta	$01
    297  1196		       20 9a 11 	      jsr	shift_on_monitor
    298  1199		       60		      rts
    299  119a
    300  119a
    301  119a							;updated shift on monitor
    302  119a							;take take y@[01],x@[00],store to [01][00] as shift,(small endian)
    303  119a							;[03][02] as character movment, [05][04]as screen color movment
    304  119a							;take take y@[22],x@[21],store to [01][00] as shift,
    305  119a							;[03][02] as character movment, [05][04]as screen color movment
    306  119a				   shift_on_monitor
    307  119a		       a5 00		      lda	$00
    308  119c		       85 03		      sta	$03	;->xto[3]
    309  119e		       a5 01		      lda	$01
    310  11a0		       85 04		      sta	$04	; -> y to [4]
    311  11a2		       a9 00		      lda	#$00
    312  11a4		       85 01		      sta	$01
    313  11a6		       85 00		      sta	$00
    314  11a8				   som_loop
    315  11a8				   som_y
    316  11a8		       a5 04		      lda	$04
    317  11aa		       c9 00		      cmp	#$0
    318  11ac		       f0 12		      beq	som_x
    319  11ae		       18		      clc
    320  11af		       a9 16		      lda	#22
    321  11b1		       65 00		      adc	$0
    322  11b3		       85 00		      sta	$0
    323  11b5
    324  11b5		       a5 01		      lda	$01
    325  11b7		       69 00		      adc	#$0
    326  11b9		       85 01		      sta	$01
    327  11bb
    328  11bb		       c6 04		      dec	$04
    329  11bd		       4c a8 11 	      jmp	som_y
    330  11c0				   som_x
    331  11c0		       18		      clc
    332  11c1		       a5 03		      lda	$03
    333  11c3		       65 00		      adc	$0
    334  11c5		       85 00		      sta	$0
    335  11c7		       a5 01		      lda	$01
    336  11c9		       69 00		      adc	#$0
    337  11cb		       85 01		      sta	$01
    338  11cd
    339  11cd							;calculate movement of characters
    340  11cd							;not out of border is assumend
    341  11cd							;last 2 digit always 0
    342  11cd		       a5 00		      lda	$00
    343  11cf		       85 02		      sta	$02
    344  11d1		       85 04		      sta	$04
    345  11d3		       18		      clc
    346  11d4
    347  11d4		       a9 1e		      lda	#$1e
    348  11d6		       65 01		      adc	$01
    349  11d8		       85 03		      sta	$03
    350  11da
    351  11da		       a9 96		      lda	#$96
    352  11dc		       65 01		      adc	$01
    353  11de		       85 05		      sta	$05
    354  11e0		       60		      rts
    355  11e1
    356  11e1							;function:clear screen
    357  11e1				   clear_screen
    358  11e1		       a9 00		      lda	#0
    359  11e3		       a2 00		      ldx	#0
    360  11e5				   clear_char
    361  11e5		       9d 00 1e 	      STA	$1e00,X
    362  11e8		       9d 00 1f 	      STA	$1f00,X
    363  11eb		       e8		      INX
    364  11ec		       d0 f7		      BNE	clear_char
    365  11ee
    366  11ee		       a9 01		      lda	#01
    367  11f0		       a2 00		      ldx	#0
    368  11f2				   white_color
    369  11f2		       9d 00 96 	      STA	$9600,X
    370  11f5		       9d ff 96 	      STA	$96ff,x
    371  11f8		       e8		      INX
    372  11f9		       d0 f7		      BNE	white_color
    373  11fb		       60		      rts
    374  11fc							;function:clear screen end
    375  11fc
    376  11fc							;loopoverdelay255
    377  11fc				   interval_start
    378  11fc		       a9 00		      lda	#$0
    379  11fe		       85 11		      sta	$11
    380  1200				   interval_loop
    381  1200		       a5 11		      lda	$11
    382  1202		       c9 0a		      cmp	#$0a
    383  1204		       f0 08		      beq	interval_done
    384  1206		       e6 11		      inc	$11
    385  1208		       20 0f 12 	      jsr	delay255_start
    386  120b		       4c 00 12 	      jmp	interval_loop
    387  120e				   interval_done
    388  120e		       60		      rts
    389  120f							;delay loop
    390  120f				   delay255_start
    391  120f		       a9 00		      lda	#$0
    392  1211		       85 01		      sta	$01
    393  1213				   delay255_loop
    394  1213		       a5 01		      lda	$01
    395  1215		       c9 ff		      cmp	#$FF
    396  1217		       f0 05		      beq	delay255_done
    397  1219		       e6 01		      inc	$01
    398  121b		       4c 13 12 	      jmp	delay255_loop
    399  121e				   delay255_done
    400  121e		       60		      rts
