------- FILE jumpingtest.s LEVEL 1 PASS 3
      1  121f					      processor	6502
      2  1220 ????
      3  1220 ????						;   jumpting test developed based on moving test.
      4  1220 ????						;   Usage:
      5  1220 ????						;W: jump to air without crashing with anything
      6  1220 ????						; can only jump on green ground
      7  1220 ????						;Z: exit
      8  1220 ????
      9  1220 ????						;   temporarily zeropage usage,
     10  1220 ????						;   19: (12,10) is an obstacle flag, will be fixed after collision problem is solved.
     11  1220 ????						;   zero PAGE USage
     12  1220 ????						;   20:current status(idle/left/right + frame/1/2)
     13  1220 ????						; ******XX
     14  1220 ????						; not frame 1: 0
     15  1220 ????						; idle frame 1: 1
     16  1220 ????						; left frame 1: 2
     17  1220 ????						; right frame 1: 3
     18  1220 ????						;*****X**
     19  1220 ????						; falling flag: 0 is not falling (either jumping to air or waling on ground)m
     20  1220 ????						; memo: 5 bits remaining
     21  1220 ????						;   21: x movement
     22  1220 ????						;   22: y movement
     23  1220 ????						;   23: vertical speed
     24  1001					      org	$1001
     25  1001		       0b 10		      dc.w	stubend
     26  1003		       39 30		      dc.w	12345
     27  1005		       9e 34 31 30*	      dc.b	$9e, "4109", 0
     28  100b				   stubend
     29  100b		       00 00		      dc.w	0
     30  100d
     31  100d				   main
     32  100d		       20 1c 11 	      jsr	startup
     33  1010				   main_loop
     34  1010		       20 8f 11 	      jsr	player_location
     35  1013		       a9 00		      lda	#$0
     36  1015		       a0 00		      ldy	#$0
     37  1017		       91 02		      sta	($02),y
     38  1019		       91 04		      sta	($04),y
     39  101b		       a0 16		      ldy	#$16
     40  101d		       91 02		      sta	($02),y
     41  101f		       91 04		      sta	($04),y
     42  1021
     43  1021		       a5 c5		      lda	$00C5	; loads the current pressed key from memory
     44  1023				   keyboard_triggers
     45  1023		       c9 11		      cmp	#17	; if A is pressed
     46  1025		       f0 17		      beq	a_left
     47  1027		       c9 12		      cmp	#18	; if D is pressed
     48  1029		       f0 1e		      beq	d_right
     49  102b		       c9 09		      cmp	#9	;if W is pressed
     50  102d		       f0 25		      beq	w_jump
     51  102f		       c9 29		      cmp	#41	;if S is pressed
     52  1031		       f0 4c		      beq	s_down
     53  1033		       c9 21		      cmp	#33
     54  1035		       f0 03		      beq	exit_prg	; if z is pressed
     55  1037		       4c 3b 10 	      jmp	case_idle
     56  103a				   exit_prg
     57  103a		       60		      rts
     58  103b
     59  103b				   case_idle
     60  103b							;coordinate not updated
     61  103b		       4c 8f 10 	      jmp	vertical_movement
     62  103e				   a_left
     63  103e							;check if x<1
     64  103e		       a5 21		      lda	$21
     65  1040		       c9 01		      cmp	#1
     66  1042		       90 f7		      bcc	case_idle	;tooleft,cannotmove
     67  1044		       c6 21		      dec	$21
     68  1046		       4c 8f 10 	      jmp	vertical_movement
     69  1049				   d_right
     70  1049							;check if x> 20 => 20< X (21 is maximum)
     71  1049		       a9 14		      lda	#20
     72  104b		       c5 21		      cmp	$21
     73  104d		       90 ec		      bcc	case_idle	;too right
     74  104f		       e6 21		      inc	$21
     75  1051		       4c 8f 10 	      jmp	vertical_movement
     76  1054				   w_jump
     77  1054							;if 2 squares below is on ground, and falling flag is 1,
     78  1054							;set falling flag to be 0 and initial vertical speed.
     79  1054							;check 2 squares from head below is ground or not.
     80  1054		       a5 21		      lda	$21
     81  1056		       85 00		      sta	$0
     82  1058		       a5 22		      lda	$22
     83  105a		       18		      clc
     84  105b		       69 02		      adc	#2
     85  105d		       85 01		      sta	$1
     86  105f		       20 9b 11 	      jsr	shift_on_monitor
     87  1062		       a0 00		      ldy	#$0
     88  1064		       b1 04		      lda	($04),y
     89  1066		       c9 05		      cmp	#05	;use color for verifying ground at the moment
     90  1068		       d0 12		      bne	w_jump_verification_done
     91  106a							;check falling flag
     92  106a		       a9 04		      lda	#%00000100
     93  106c		       25 20		      and	$20
     94  106e		       c9 04		      cmp	#%00000100
     95  1070		       d0 0a		      bne	w_jump_verification_done
     96  1072							;set up jump flag and initial vertical speed
     97  1072		       a9 fb		      lda	#%11111011
     98  1074		       25 20		      and	$20
     99  1076		       85 20		      sta	$20
    100  1078		       a9 03		      lda	#3
    101  107a		       85 23		      sta	$23
    102  107c				   w_jump_verification_done
    103  107c		       4c 8f 10 	      jmp	vertical_movement
    104  107f
    105  107f				   s_down
    106  107f							;used for reset
    107  107f		       a9 00		      lda	#0
    108  1081		       85 21		      sta	$21
    109  1083		       a9 0c		      lda	#12
    110  1085		       85 22		      sta	$22
    111  1087		       a9 04		      lda	#%00000100
    112  1089		       85 20		      sta	$20	;reset jump flag
    113  108b		       a9 00		      lda	#0
    114  108d		       85 23		      sta	$23
    115  108f
    116  108f
    117  108f				   vertical_movement
    118  108f				   revise_vertical_speed
    119  108f							;   check is jumping
    120  108f		       a9 04		      lda	#%00000100
    121  1091		       25 20		      and	$20
    122  1093		       c9 04		      cmp	#%00000100
    123  1095		       f0 49		      beq	revise_vertical_falling_speed
    124  1097							;case jumping
    125  1097		       a5 23		      lda	$23
    126  1099		       c9 00		      cmp	#0	;change to fall when vertical spped is 0
    127  109b		       f0 36		      beq	stop_jumping
    128  109d		       a5 22		      lda	$22
    129  109f		       c9 00		      cmp	#0	;change to fall when at top border
    130  10a1		       f0 30		      beq	stop_jumping
    131  10a3
    132  10a3				   on_top_checking
    133  10a3		       a2 01		      ldx	#$1
    134  10a5				   on_top_checking_loop
    135  10a5							;	 things from now to b4 crashed jumping will be handled in collision test stage later
    136  10a5		       e4 23		      cpx	$23
    137  10a7		       f0 1c		      beq	normal_jumping
    138  10a9							;update y for shift on monitor
    139  10a9		       86 00		      stx	$0
    140  10ab		       38		      sec
    141  10ac		       a5 22		      lda	$22
    142  10ae		       e5 00		      sbc	$0
    143  10b0		       85 01		      sta	$1
    144  10b2							;x for shift on monitor
    145  10b2		       a5 21		      lda	$21
    146  10b4		       85 00		      sta	$0
    147  10b6		       20 9b 11 	      jsr	shift_on_monitor
    148  10b9
    149  10b9		       a0 00		      ldy	#$0
    150  10bb		       b1 04		      lda	($04),y
    151  10bd		       c9 01		      cmp	#01	;use color for verifying ground at the moment
    152  10bf		       d0 01		      bne	crashed_jumgfping
    153  10c1		       e8		      inx
    154  10c2		       4c a5 10 	      jmp	on_top_checking_loop
    155  10c5				   normal_jumping
    156  10c5		       c6 23		      dec	$23
    157  10c7		       4c dd 10 	      jmp	revise_vertical_jumping_done
    158  10ca				   crashed_jumping
    159  10ca		       e0 01		      cpx	#$1
    160  10cc		       f0 05		      beq	stop_jumping
    161  10ce				   crashed_after_jump
    162  10ce		       86 23		      stx	$23
    163  10d0		       4c dd 10 	      jmp	revise_vertical_jumping_done
    164  10d3				   stop_jumping
    165  10d3		       a9 04		      lda	#%00000100
    166  10d5		       05 20		      ora	$20
    167  10d7		       85 20		      sta	$20
    168  10d9		       a9 00		      lda	#0
    169  10db		       85 23		      sta	$23
    170  10dd				   revise_vertical_jumping_done
    171  10dd		       4c e0 10 	      jmp	main_update_vertical_shift
    172  10e0				   revise_vertical_falling_speed
    173  10e0
    174  10e0				   main_update_vertical_shift
    175  10e0							;is vertical speed 0?
    176  10e0		       a5 23		      lda	$23
    177  10e2		       c9 00		      cmp	#0
    178  10e4		       f0 19		      beq	main_update_shift_end
    179  10e6							;falling or jumping?
    180  10e6		       a9 04		      lda	#%00000100
    181  10e8		       25 20		      and	$20
    182  10ea		       c9 00		      cmp	#%00000000
    183  10ec		       d0 0a		      bne	update_vertical_shift_falling
    184  10ee							;case jumping
    185  10ee		       38		      sec
    186  10ef		       a5 22		      lda	$22
    187  10f1		       e5 23		      sbc	$23
    188  10f3		       85 22		      sta	$22
    189  10f5		       4c ff 10 	      jmp	main_update_shift_end
    190  10f8				   update_vertical_shift_falling
    191  10f8		       18		      clc
    192  10f9		       a5 23		      lda	$23
    193  10fb		       65 22		      adc	$22
    194  10fd		       85 22		      sta	$22
    195  10ff
    196  10ff				   main_update_shift_end
    197  10ff		       20 8f 11 	      jsr	player_location
    198  1102		       a0 00		      ldy	#$0
    199  1104		       a9 01		      lda	#01	;a squre
    200  1106		       91 02		      sta	($02),y
    201  1108		       a0 16		      ldy	#$16
    202  110a		       91 02		      sta	($02),y
    203  110c
    204  110c		       a9 02		      lda	#02	;color red
    205  110e		       a0 00		      ldy	#$0
    206  1110		       91 04		      sta	($04),y
    207  1112		       a0 16		      ldy	#$16
    208  1114		       91 04		      sta	($04),y
    209  1116
    210  1116		       20 fd 11 	      jsr	interval_start
    211  1119		       4c 10 10 	      jmp	main_loop
    212  111c
    213  111c							;=====================================
    214  111c							;    tempordary code for jumping and falling tests
    215  111c							;=====================================
    216  111c				   startup
    217  111c
    218  111c							;charcterset to from 1c00
    219  111c		       a9 ff		      lda	#255
    220  111e		       8d 05 90 	      sta	$9005
    221  1121
    222  1121		       20 72 11 	      jsr	store_char
    223  1124		       20 e2 11 	      jsr	clear_screen
    224  1127
    225  1127
    226  1127
    227  1127				   draw_an_obstacle
    228  1127		       a9 0c		      lda	#12
    229  1129		       85 00		      sta	$00
    230  112b		       a9 0a		      lda	#10
    231  112d		       85 01		      sta	$01
    232  112f		       20 9b 11 	      jsr	shift_on_monitor
    233  1132		       a0 00		      ldy	#$0
    234  1134		       a9 01		      lda	#01	;a squre
    235  1136		       91 02		      sta	($02),y
    236  1138		       a9 06		      lda	#06	;color orange
    237  113a		       a0 00		      ldy	#$0
    238  113c		       91 04		      sta	($04),y
    239  113e		       a0 16		      ldy	#$16
    240  1140		       91 04		      sta	($04),y
    241  1142
    242  1142				   drawing_ground
    243  1142		       a2 00		      ldx	#0
    244  1144				   drawing_ground_loop
    245  1144		       a9 0e		      lda	#14
    246  1146		       85 01		      sta	$01
    247  1148		       e0 14		      cpx	#20
    248  114a		       f0 15		      beq	drawing_ground_done
    249  114c		       86 00		      stx	$00
    250  114e		       20 9b 11 	      jsr	shift_on_monitor
    251  1151		       a0 00		      ldy	#$0
    252  1153		       a9 01		      lda	#01	;a squre
    253  1155		       91 02		      sta	($02),y
    254  1157		       a9 05		      lda	#05	;color green
    255  1159		       a0 00		      ldy	#$0
    256  115b		       91 04		      sta	($04),y
    257  115d		       e8		      inx
    258  115e		       4c 44 11 	      jmp	drawing_ground_loop
    259  1161				   drawing_ground_done
    260  1161
    261  1161							;start location
    262  1161		       a9 0c		      lda	#12
    263  1163		       85 21		      sta	$21
    264  1165		       a9 0c		      lda	#12
    265  1167		       85 22		      sta	$22
    266  1169		       a9 04		      lda	#%00000100
    267  116b		       85 20		      sta	$20
    268  116d		       a9 00		      lda	#0
    269  116f		       85 23		      sta	$23
    270  1171		       60		      rts
    271  1172
    272  1172							;============================
    273  1172				   store_char
    274  1172		       a2 00		      ldx	#$0
    275  1174		       a9 00		      lda	#$0
    276  1176				   char1
    277  1176		       e0 08		      cpx	#8
    278  1178		       f0 07		      beq	char2
    279  117a		       9d 00 1c 	      sta	$1c00,x
    280  117d		       e8		      inx
    281  117e		       4c 76 11 	      jmp	char1
    282  1181				   char2
    283  1181		       a9 ff		      lda	#$ff
    284  1183		       e0 10		      cpx	#16
    285  1185		       f0 07		      beq	store_char_end
    286  1187		       9d 00 1c 	      sta	$1c00,x
    287  118a		       e8		      inx
    288  118b		       4c 81 11 	      jmp	char2
    289  118e				   store_char_end
    290  118e		       60		      rts
    291  118f
    292  118f							;=====================================
    293  118f							;player location
    294  118f				   player_location
    295  118f		       a5 21		      lda	$21
    296  1191		       85 00		      sta	$00
    297  1193		       a5 22		      lda	$22
    298  1195		       85 01		      sta	$01
    299  1197		       20 9b 11 	      jsr	shift_on_monitor
    300  119a		       60		      rts
    301  119b
    302  119b
    303  119b							;updated shift on monitor
    304  119b							;take take y@[01],x@[00],store to [01][00] as shift,(small endian)
    305  119b							;[03][02] as character movment, [05][04]as screen color movment
    306  119b							;take take y@[22],x@[21],store to [01][00] as shift,
    307  119b							;[03][02] as character movment, [05][04]as screen color movment
    308  119b				   shift_on_monitor
    309  119b		       a5 00		      lda	$00
    310  119d		       85 03		      sta	$03	;->xto[3]
    311  119f		       a5 01		      lda	$01
    312  11a1		       85 04		      sta	$04	; -> y to [4]
    313  11a3		       a9 00		      lda	#$00
    314  11a5		       85 01		      sta	$01
    315  11a7		       85 00		      sta	$00
    316  11a9				   som_loop
    317  11a9				   som_y
    318  11a9		       a5 04		      lda	$04
    319  11ab		       c9 00		      cmp	#$0
    320  11ad		       f0 12		      beq	som_x
    321  11af		       18		      clc
    322  11b0		       a9 16		      lda	#22
    323  11b2		       65 00		      adc	$0
    324  11b4		       85 00		      sta	$0
    325  11b6
    326  11b6		       a5 01		      lda	$01
    327  11b8		       69 00		      adc	#$0
    328  11ba		       85 01		      sta	$01
    329  11bc
    330  11bc		       c6 04		      dec	$04
    331  11be		       4c a9 11 	      jmp	som_y
    332  11c1				   som_x
    333  11c1		       18		      clc
    334  11c2		       a5 03		      lda	$03
    335  11c4		       65 00		      adc	$0
    336  11c6		       85 00		      sta	$0
    337  11c8		       a5 01		      lda	$01
    338  11ca		       69 00		      adc	#$0
    339  11cc		       85 01		      sta	$01
    340  11ce
    341  11ce							;calculate movement of characters
    342  11ce							;not out of border is assumend
    343  11ce							;last 2 digit always 0
    344  11ce		       a5 00		      lda	$00
    345  11d0		       85 02		      sta	$02
    346  11d2		       85 04		      sta	$04
    347  11d4		       18		      clc
    348  11d5
    349  11d5		       a9 1e		      lda	#$1e
    350  11d7		       65 01		      adc	$01
    351  11d9		       85 03		      sta	$03
    352  11db
    353  11db		       a9 96		      lda	#$96
    354  11dd		       65 01		      adc	$01
    355  11df		       85 05		      sta	$05
    356  11e1		       60		      rts
    357  11e2
    358  11e2							;function:clear screen
    359  11e2				   clear_screen
    360  11e2		       a9 00		      lda	#0
    361  11e4		       a2 00		      ldx	#0
    362  11e6				   clear_char
    363  11e6		       9d 00 1e 	      STA	$1e00,X
    364  11e9		       9d 00 1f 	      STA	$1f00,X
    365  11ec		       e8		      INX
    366  11ed		       d0 f7		      BNE	clear_char
    367  11ef
    368  11ef		       a9 01		      lda	#01
    369  11f1		       a2 00		      ldx	#0
    370  11f3				   white_color
    371  11f3		       9d 00 96 	      STA	$9600,X
    372  11f6		       9d ff 96 	      STA	$96ff,x
    373  11f9		       e8		      INX
    374  11fa		       d0 f7		      BNE	white_color
    375  11fc		       60		      rts
    376  11fd							;function:clear screen end
    377  11fd
    378  11fd							;loopoverdelay255
    379  11fd				   interval_start
    380  11fd		       a9 00		      lda	#$0
    381  11ff		       85 11		      sta	$11
    382  1201				   interval_loop
    383  1201		       a5 11		      lda	$11
    384  1203		       c9 0a		      cmp	#$0a
    385  1205		       f0 08		      beq	interval_done
    386  1207		       e6 11		      inc	$11
    387  1209		       20 10 12 	      jsr	delay255_start
    388  120c		       4c 01 12 	      jmp	interval_loop
    389  120f				   interval_done
    390  120f		       60		      rts
    391  1210							;delay loop
    392  1210				   delay255_start
    393  1210		       a9 00		      lda	#$0
    394  1212		       85 01		      sta	$01
    395  1214				   delay255_loop
    396  1214		       a5 01		      lda	$01
    397  1216		       c9 ff		      cmp	#$FF
    398  1218		       f0 05		      beq	delay255_done
    399  121a		       e6 01		      inc	$01
    400  121c		       4c 14 12 	      jmp	delay255_loop
    401  121f				   delay255_done
    402  121f		       60		      rts
