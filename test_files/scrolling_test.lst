------- FILE scrolling_test.s LEVEL 1 PASS 2
      1  1c4f					      processor	6502
      2  1c50 ????
      3  1c50 ????						;   KERNAL [sic] routines
      4  1c50 ????
      5  1c50 ????	       ff d2	   CHROUT     =	$ffd2
      6  1c50 ????	       ff cf	   CHRIN      =	$ffcf
      7  1c50 ????
      8  1001					      org	$1001
      9  1001		       0b 10		      dc.w	stubend
     10  1003		       39 30		      dc.w	12345
     11  1005		       9e 34 31 30*	      dc.b	$9e, "4109", 0
     12  100b				   stubend
     13  100b		       00 00		      dc.w	0
     14  100d
     15  100d				   start
     16  100d
     17  100d		       a9 00		      lda	#00
     18  100f		       a2 00		      ldx	#0
     19  1011				   whitescreen
     20  1011		       9d 00 1e 	      STA	$1e00,X
     21  1014		       e8		      INX
     22  1015		       e0 ff		      cpx	#$FF
     23  1017		       d0 f8		      BNE	whitescreen
     24  1019		       9d 00 1e 	      STA	$1e00,X
     25  101c
     26  101c		       a9 00		      lda	#00
     27  101e		       a2 00		      ldx	#0
     28  1020				   whitescreen2
     29  1020		       9d 00 1f 	      STA	$1f00,X
     30  1023		       e8		      INX
     31  1024		       e0 ff		      cpx	#$FF
     32  1026		       d0 f8		      BNE	whitescreen2
     33  1028		       9d 00 1f 	      STA	$1f00,X
     34  102b
     35  102b							;   Switching character set pointer to 0x1c00:
     36  102b		       a9 ff		      lda	#255
     37  102d		       8d 05 90 	      STA	$9005	; POKE 36869 255 (from book)
     38  1030
     39  1030							;   Next, fill 0x9600 - 0x9700 (color RAM) with $00
     40  1030
     41  1030							;   loop to fill 0x9600 - 0x96FF with FF:
     42  1030		       a9 00		      lda	#$00
     43  1032		       a2 00		      ldx	#$00
     44  1034				   color_ram
     45  1034		       9d 00 96 	      STA	$9600,X
     46  1037		       e8		      INX
     47  1038		       e0 ff		      cpx	#255
     48  103a		       d0 f8		      BNE	color_ram
     49  103c		       9d 00 96 	      STA	$9600,X
     50  103f
     51  103f							;   loop to fill 0x9700 - 0x97FF with FF:
     52  103f		       a9 00		      lda	#$00
     53  1041		       a2 00		      ldx	#0
     54  1043				   color_ram1
     55  1043		       9d 00 97 	      STA	$9700,X
     56  1046		       e8		      INX
     57  1047		       e0 ff		      cpx	#255
     58  1049		       d0 f8		      BNE	color_ram1
     59  104b		       9d 00 97 	      STA	$9700,X
     60  104e
     61  104e							;   Now, all the pixels on the display are enabled
     62  104e
     63  104e		       a2 02		      ldx	#2	; we will use x register as frame counter / character set index here
     64  1050
     65  1050				   loop
     66  1050		       a5 c5		      lda	$00C5	; loads the current pressed key from memory
     67  1052		       c9 40		      cmp	#64
     68  1054		       f0 fa		      beq	loop
     69  1056		       c9 11		      cmp	#17
     70  1058		       f0 0c		      beq	is_a	; if A is pressed
     71  105a		       c9 12		      cmp	#18
     72  105c		       f0 12		      beq	is_d	; if D is pressed
     73  105e		       c9 21		      cmp	#33
     74  1060		       f0 03		      beq	exit_prg
     75  1062		       4c 50 10 	      jmp	loop
     76  1065
     77  1065				   exit_prg
     78  1065		       60		      rts
     79  1066
     80  1066				   is_a 		; if a was pressed, decrease frame
     81  1066
     82  1066		       ca		      DEX
     83  1067		       e0 01		      CPX	#$1	; compares to 1, if 1 then wrap to 9
     84  1069		       d0 0f		      BNE	printchar
     85  106b		       a2 09		      ldx	#$9
     86  106d		       4c 7a 10 	      jmp	printchar
     87  1070
     88  1070							;lda	  #00		 ; prints character at 0x1c00
     89  1070							;jmp	  printchar
     90  1070				   is_d 		; if d was pressed, decrease frame
     91  1070
     92  1070		       e8		      INX
     93  1071		       e0 0a		      CPX	#$A	; compares to 10, if 10 then wrap to 2
     94  1073		       d0 05		      BNE	printchar
     95  1075		       a2 02		      ldx	#$2
     96  1077		       4c 7a 10 	      jmp	printchar
     97  107a
     98  107a							;lda	  #01		  ; prints character at 0x1c08
     99  107a							;jmp	  printchar
    100  107a
    101  107a				   printchar
    102  107a		       8e 08 1e 	      STX	$1e08	; character set offset in X, into screen memory location (arbitary)
    103  107d							; first byte of screen memory
    104  107d							; $1e00 is first byte of screen memory
    105  107d		       84 00		      sty	$0
    106  107f				   waste_time_loop
    107  107f		       c8		      INY
    108  1080		       c4 ff		      CPY	$FF	; waste time by counting up to 255 in Y reg
    109  1082		       d0 fb		      BNE	waste_time_loop
    110  1084
    111  1084		       4c 50 10 	      jmp	loop	; go to top of while loop
    112  1087
    113  1087
    114  1087							;/*
    115  1087							;------------------
    116  1087							;CHARACTER SET DATA:
    117  1087							;------------------
    118  1087							;*/
    119  1c00					      org	$1c00
    120  1c00
    121  1c00							;	 CHAR 00	 ; all empty
    122  1c00		       00 00 00 00*	      ds	8, $00	; declares 8 bytes of value 0x00
    123  1c08							;	 CHAR 01	 ; all filled
    124  1c08		       ff ff ff ff*	      ds	8, $FF	; declares 8 bytes of value 0xFF
    125  1c10
    126  1c10							;	 CHAR 02
    127  1c10		       00		      dc.b	%00000000
    128  1c11		       00		      dc.b	%00000000
    129  1c12		       3c		      dc.b	%00111100
    130  1c13		       3c		      dc.b	%00111100
    131  1c14		       3c		      dc.b	%00111100
    132  1c15		       3c		      dc.b	%00111100
    133  1c16		       00		      dc.b	%00000000
    134  1c17		       00		      dc.b	%00000000
    135  1c18
    136  1c18							;	 CHAR 03
    137  1c18		       00		      dc.b	%00000000
    138  1c19		       00		      dc.b	%00000000
    139  1c1a		       78		      dc.b	%01111000
    140  1c1b		       78		      dc.b	%01111000
    141  1c1c		       78		      dc.b	%01111000
    142  1c1d		       78		      dc.b	%01111000
    143  1c1e		       00		      dc.b	%00000000
    144  1c1f		       00		      dc.b	%00000000
    145  1c20
    146  1c20							;	 CHAR 04
    147  1c20		       00		      dc.b	%00000000
    148  1c21		       00		      dc.b	%00000000
    149  1c22		       f0		      dc.b	%11110000
    150  1c23		       f0		      dc.b	%11110000
    151  1c24		       f0		      dc.b	%11110000
    152  1c25		       f0		      dc.b	%11110000
    153  1c26		       00		      dc.b	%00000000
    154  1c27		       00		      dc.b	%00000000
    155  1c28
    156  1c28							;	 CHAR 05
    157  1c28		       00		      dc.b	%00000000
    158  1c29		       00		      dc.b	%00000000
    159  1c2a		       e1		      dc.b	%11100001
    160  1c2b		       e1		      dc.b	%11100001
    161  1c2c		       e1		      dc.b	%11100001
    162  1c2d		       e1		      dc.b	%11100001
    163  1c2e		       00		      dc.b	%00000000
    164  1c2f		       00		      dc.b	%00000000
    165  1c30
    166  1c30							;	 CHAR 06
    167  1c30		       00		      dc.b	%00000000
    168  1c31		       00		      dc.b	%00000000
    169  1c32		       c3		      dc.b	%11000011
    170  1c33		       c3		      dc.b	%11000011
    171  1c34		       c3		      dc.b	%11000011
    172  1c35		       c3		      dc.b	%11000011
    173  1c36		       00		      dc.b	%00000000
    174  1c37		       00		      dc.b	%00000000
    175  1c38
    176  1c38							;	 CHAR 07
    177  1c38		       00		      dc.b	%00000000
    178  1c39		       00		      dc.b	%00000000
    179  1c3a		       87		      dc.b	%10000111
    180  1c3b		       87		      dc.b	%10000111
    181  1c3c		       87		      dc.b	%10000111
    182  1c3d		       87		      dc.b	%10000111
    183  1c3e		       00		      dc.b	%00000000
    184  1c3f		       00		      dc.b	%00000000
    185  1c40
    186  1c40							;	 CHAR 08
    187  1c40		       00		      dc.b	%00000000
    188  1c41		       00		      dc.b	%00000000
    189  1c42		       0f		      dc.b	%00001111
    190  1c43		       0f		      dc.b	%00001111
    191  1c44		       0f		      dc.b	%00001111
    192  1c45		       0f		      dc.b	%00001111
    193  1c46		       00		      dc.b	%00000000
    194  1c47		       00		      dc.b	%00000000
    195  1c48
    196  1c48							;	 CHAR 09
    197  1c48		       00		      dc.b	%00000000
    198  1c49		       00		      dc.b	%00000000
    199  1c4a		       1e		      dc.b	%00011110
    200  1c4b		       1e		      dc.b	%00011110
    201  1c4c		       1e		      dc.b	%00011110
    202  1c4d		       1e		      dc.b	%00011110
    203  1c4e		       00		      dc.b	%00000000
    204  1c4f		       00		      dc.b	%00000000
