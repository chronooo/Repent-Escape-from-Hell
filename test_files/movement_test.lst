------- FILE movement_test.s LEVEL 1 PASS 2
      1  113b					      processor	6502
      2  113c ????
      3  113c ????						;   KERNAL [sic] routines
      4  113c ????	       32 33 34 35 IDLE_TOP_1 =	"12345"
      5  113c ????	       32 33 34 35 IDLE_TOP_2 =	"12345"
      6  113c ????	       32 33 34 35 LEFT_TOP_1 =	"12345"
      7  113c ????	       32 33 34 35 LEFT_TOP_2 =	"12345"
      8  113c ????	       32 33 34 35 RIGHT_TOP_1 =	"12345"
      9  113c ????	       32 33 34 35 RIGHT_TOP_2 =	"12345"
     10  113c ????						;   zero PAGE USage
     11  113c ????						;   20:current status(idle/left/right + frame/1/2)
     12  113c ????						; idle frame 1/2: 0/1
     13  113c ????						; left frame 1/2: 2/3
     14  113c ????						; right frame 1/2: 4/5
     15  113c ????						;   21: x movement
     16  113c ????						;   22: y movement
     17  1001					      org	$1001
     18  1001		       0b 10		      dc.w	stubend
     19  1003		       39 30		      dc.w	12345
     20  1005		       9e 34 31 30*	      dc.b	$9e, "4109", 0
     21  100b				   stubend
     22  100b		       00 00		      dc.w	0
     23  100d
     24  100d				   main
     25  100d		       20 1f 11 	      jsr	store_char
     26  1010		       20 e1 10 	      jsr	clear_screen
     27  1013
     28  1013							;charcterset to from 1c00
     29  1013		       a9 ff		      lda	#255
     30  1015		       8d 05 90 	      sta	$9005
     31  1018
     32  1018							;start location
     33  1018		       a9 01		      lda	#1
     34  101a		       85 21		      sta	$21
     35  101c		       a9 01		      lda	#1
     36  101e		       85 22		      sta	$22
     37  1020
     38  1020				   main_loop
     39  1020		       20 9a 10 	      jsr	shift_on_monitor
     40  1023		       a9 00		      lda	#$0
     41  1025		       a0 00		      ldy	#$0
     42  1027		       91 02		      sta	($02),y
     43  1029		       91 04		      sta	($04),y
     44  102b		       a0 16		      ldy	#$16
     45  102d		       91 02		      sta	($02),y
     46  102f		       91 04		      sta	($04),y
     47  1031							;jmp	  s_down       ;test purpose
     48  1031		       a5 c5		      lda	$00C5	; loads the current pressed key from memory
     49  1033
     50  1033		       c9 40		      cmp	#64	;if nothing held down
     51  1035		       f0 16		      beq	case_idle
     52  1037		       c9 11		      cmp	#17	; if A is pressed
     53  1039		       f0 15		      beq	a_left
     54  103b		       c9 12		      cmp	#18	; if D is pressed
     55  103d		       f0 1c		      beq	d_right
     56  103f		       c9 09		      cmp	#9	;if W is pressed
     57  1041		       f0 23		      beq	w_top
     58  1043		       c9 29		      cmp	#41	;if S is pressed
     59  1045		       f0 2a		      beq	s_down
     60  1047		       c9 21		      cmp	#33
     61  1049		       f0 4e		      beq	exit_prg
     62  104b				   main_update_shift
     63  104b		       a5 20		      lda	$20
     64  104d				   case_idle
     65  104d							;coordinate not updated
     66  104d		       4c 7c 10 	      jmp	main_update_shift_end
     67  1050				   a_left
     68  1050							;check if x<1
     69  1050		       a5 21		      lda	$21
     70  1052		       c9 01		      cmp	#1
     71  1054		       90 f7		      bcc	case_idle	;tooleft,cannotmove
     72  1056		       c6 21		      dec	$21
     73  1058		       4c 7c 10 	      jmp	main_update_shift_end
     74  105b				   d_right
     75  105b							;check if x> 20 => 20< X (21 is maximum)
     76  105b		       a9 14		      lda	#20
     77  105d		       c5 21		      cmp	$21
     78  105f		       90 ec		      bcc	case_idle	;too right
     79  1061		       e6 21		      inc	$21
     80  1063		       4c 7c 10 	      jmp	main_update_shift_end
     81  1066				   w_top
     82  1066							;check y <1
     83  1066		       a5 22		      lda	$22
     84  1068		       c9 01		      cmp	#1
     85  106a		       90 e1		      bcc	case_idle	;too top
     86  106c		       c6 22		      dec	$22
     87  106e		       4c 7c 10 	      jmp	main_update_shift_end
     88  1071				   s_down
     89  1071							;check if y>21 => 21<y (22 is maximum)
     90  1071		       a9 14		      lda	#20
     91  1073		       c5 22		      cmp	$22
     92  1075		       90 d6		      bcc	case_idle	;too bottom
     93  1077		       e6 22		      inc	$22
     94  1079		       4c 7c 10 	      jmp	main_update_shift_end
     95  107c				   main_update_shift_end
     96  107c		       20 9a 10 	      jsr	shift_on_monitor
     97  107f		       a0 00		      ldy	#$0
     98  1081		       a9 01		      lda	#01	;a squre
     99  1083		       91 02		      sta	($02),y
    100  1085		       a0 16		      ldy	#$16
    101  1087		       91 02		      sta	($02),y
    102  1089
    103  1089		       a9 02		      lda	#02	;color red
    104  108b		       a0 00		      ldy	#$0
    105  108d		       91 04		      sta	($04),y
    106  108f		       a0 16		      ldy	#$16
    107  1091		       91 04		      sta	($04),y
    108  1093
    109  1093		       20 fc 10 	      jsr	interval_start
    110  1096		       4c 20 10 	      jmp	main_loop
    111  1099				   exit_prg
    112  1099		       60		      rts
    113  109a
    114  109a
    115  109a
    116  109a
    117  109a							;take take y@[22],x@[21],store to [01][00] as shift,
    118  109a							;[03][02] as character movment, [05][04]as screen color movment
    119  109a				   shift_on_monitor
    120  109a		       a5 21		      lda	$21
    121  109c		       85 03		      sta	$03	;->xto[3]
    122  109e		       a5 22		      lda	$22
    123  10a0		       85 04		      sta	$04	; -> y to [4]
    124  10a2		       a9 00		      lda	#$00
    125  10a4		       85 01		      sta	$01
    126  10a6		       85 00		      sta	$00
    127  10a8				   som_loop
    128  10a8				   som_y
    129  10a8		       a5 04		      lda	$04
    130  10aa		       c9 00		      cmp	#$0
    131  10ac		       f0 12		      beq	som_x
    132  10ae		       18		      clc
    133  10af		       a9 16		      lda	#22
    134  10b1		       65 00		      adc	$0
    135  10b3		       85 00		      sta	$0
    136  10b5
    137  10b5		       a5 01		      lda	$01
    138  10b7		       69 00		      adc	#$0
    139  10b9		       85 01		      sta	$01
    140  10bb
    141  10bb		       c6 04		      dec	$04
    142  10bd		       4c a8 10 	      jmp	som_y
    143  10c0				   som_x
    144  10c0		       18		      clc
    145  10c1		       a5 03		      lda	$03
    146  10c3		       65 00		      adc	$0
    147  10c5		       85 00		      sta	$0
    148  10c7		       a5 01		      lda	$01
    149  10c9		       69 00		      adc	#$0
    150  10cb		       85 01		      sta	$01
    151  10cd
    152  10cd							;calculate movement of characters
    153  10cd							;not out of border is assumend
    154  10cd							;last 2 digit always 0
    155  10cd		       a5 00		      lda	$00
    156  10cf		       85 02		      sta	$02
    157  10d1		       85 04		      sta	$04
    158  10d3		       18		      clc
    159  10d4
    160  10d4		       a9 1e		      lda	#$1e
    161  10d6		       65 01		      adc	$01
    162  10d8		       85 03		      sta	$03
    163  10da
    164  10da		       a9 96		      lda	#$96
    165  10dc		       65 01		      adc	$01
    166  10de		       85 05		      sta	$05
    167  10e0		       60		      rts
    168  10e1
    169  10e1							;function:clear screen
    170  10e1				   clear_screen
    171  10e1		       a9 00		      lda	#0
    172  10e3		       a2 00		      ldx	#0
    173  10e5				   clear_char
    174  10e5		       9d 00 1e 	      STA	$1e00,X
    175  10e8		       9d 00 1f 	      STA	$1f00,X
    176  10eb		       e8		      INX
    177  10ec		       d0 f7		      BNE	clear_char
    178  10ee
    179  10ee		       a9 01		      lda	#01
    180  10f0		       a2 00		      ldx	#0
    181  10f2				   white_color
    182  10f2		       9d 00 96 	      STA	$9600,X
    183  10f5		       9d ff 96 	      STA	$96ff,x
    184  10f8		       e8		      INX
    185  10f9		       d0 f7		      BNE	white_color
    186  10fb		       60		      rts
    187  10fc							;function:clear screen end
    188  10fc
    189  10fc							;loopoverdelay255
    190  10fc				   interval_start
    191  10fc		       a9 00		      lda	#$0
    192  10fe		       85 11		      sta	$11
    193  1100				   interval_loop
    194  1100		       a5 11		      lda	$11
    195  1102		       c9 0a		      cmp	#$0a
    196  1104		       f0 08		      beq	interval_done
    197  1106		       e6 11		      inc	$11
    198  1108		       20 0f 11 	      jsr	delay255_start
    199  110b		       4c 00 11 	      jmp	interval_loop
    200  110e				   interval_done
    201  110e		       60		      rts
    202  110f
    203  110f							;delay loop
    204  110f				   delay255_start
    205  110f		       a9 00		      lda	#$0
    206  1111		       85 01		      sta	$01
    207  1113				   delay255_loop
    208  1113		       a5 01		      lda	$01
    209  1115		       c9 ff		      cmp	#$FF
    210  1117		       f0 05		      beq	delay255_done
    211  1119		       e6 01		      inc	$01
    212  111b		       4c 13 11 	      jmp	delay255_loop
    213  111e				   delay255_done
    214  111e		       60		      rts
    215  111f
    216  111f							;include "shift_on_monitor.s"
    217  111f							;include "tempChars.s"
    218  111f				   store_char
    219  111f		       a2 00		      ldx	#$0
    220  1121		       a9 00		      lda	#$0
    221  1123				   char1
    222  1123		       e0 08		      cpx	#8
    223  1125		       f0 07		      beq	char2
    224  1127		       9d 00 1c 	      sta	$1c00,x
    225  112a		       e8		      inx
    226  112b		       4c 23 11 	      jmp	char1
    227  112e				   char2
    228  112e		       a9 ff		      lda	#$ff
    229  1130		       e0 10		      cpx	#16
    230  1132		       f0 07		      beq	store_char_end
    231  1134		       9d 00 1c 	      sta	$1c00,x
    232  1137		       e8		      inx
    233  1138		       4c 2e 11 	      jmp	char2
    234  113b				   store_char_end
    235  113b		       60		      rts
