------- FILE customgraphics.s LEVEL 1 PASS 2
      1  108e					      processor	6502
      2  108e ????
      3  108e ????						; KERNAL [sic] routines
      4  108e ????	       ff d2	   CHROUT     =	$ffd2
      5  108e ????	       ff cf	   CHRIN      =	$ffcf
      6  108e ????
      7  1001					      org	$1001
      8  1001
      9  1001		       0b 10		      dc.w	stubend
     10  1003		       39 30		      dc.w	12345
     11  1005		       9e 34 31 30*	      dc.b	$9e, "4109", 0
     12  100b
     13  100b
     14  100b
     15  100b				   stubend
     16  100b		       00 00		      dc.w	0
     17  100d
     18  100d				   start
     19  100d
     20  100d		       a9 20		      lda	#32
     21  100f		       a2 00		      ldx	#0
     22  1011				   whitescreen
     23  1011		       9d 00 1e 	      STA	$1e00,X
     24  1014		       e8		      INX
     25  1015
     26  1015		       e0 ff		      cpx	#255
     27  1017		       d0 f8		      BNE	whitescreen
     28  1019
     29  1019		       a9 00		      lda	#$00
     30  101b		       a2 00		      ldx	#0
     31  101d				   whitescreen2
     32  101d		       9d 00 1f 	      STA	$1f00,X
     33  1020		       e8		      INX
     34  1021
     35  1021		       e0 ff		      cpx	#255
     36  1023		       d0 f8		      BNE	whitescreen2
     37  1025
     38  1025		       a9 00		      lda	#$00
     39  1027		       a2 00		      ldx	#0
     40  1029
     41  1029		       a9 ff		      lda	#255
     42  102b		       8d 05 90 	      STA	$9005	; POKE 36869 255
     43  102e							;	 now we should have our character set at 7168, or 0x1c00
     44  102e
     45  102e		       a9 55		      lda	#$55	; 01010101
     46  1030		       a2 00		      ldx	#0
     47  1032				   fillchar		; loop to fill 1c08 - 1c10 with FF
     48  1032		       9d 08 1c 	      STA	$1c08,X
     49  1035		       e8		      INX
     50  1036		       e0 08		      cpx	#8
     51  1038		       d0 f8		      BNE	fillchar
     52  103a
     53  103a		       a9 aa		      lda	#$AA	; 10101010
     54  103c		       a2 00		      ldx	#0
     55  103e				   equalschar		; loop to fill 1c20 - 1c28 with AA
     56  103e		       9d 20 1c 	      STA	$1c20,X
     57  1041		       e8		      INX
     58  1042		       e0 08		      cpx	#8
     59  1044		       d0 f8		      BNE	equalschar
     60  1046
     61  1046		       a9 00		      lda	#$00
     62  1048		       a2 00		      ldx	#0
     63  104a				   colorRamFill 		; fill color ram 0x9600 to 0x96ff with black (00)
     64  104a		       9d 00 96 	      STA	$9600,X
     65  104d		       e8		      INX
     66  104e		       e0 ff		      cpx	#255
     67  1050		       d0 f8		      BNE	colorRamFill
     68  1052		       9d 00 96 	      STA	$9600,X
     69  1055		       a9 00		      lda	#$00
     70  1057		       a2 00		      ldx	#0
     71  1059
     72  1059				   colorRamFill2		; fill color ram 0x9700 to 0x97ff with black (00)
     73  1059		       9d 00 97 	      STA	$9700,X
     74  105c		       e8		      INX
     75  105d		       e0 ff		      cpx	#255
     76  105f		       d0 f8		      BNE	colorRamFill2
     77  1061		       9d 00 97 	      STA	$9700,X
     78  1064		       a9 00		      lda	#$00
     79  1066		       a2 00		      ldx	#0
     80  1068
     81  1068				   loop
     82  1068		       a5 c5		      lda	$00C5
     83  106a		       c9 40		      cmp	#64
     84  106c		       f0 fa		      beq	loop
     85  106e		       c9 11		      cmp	#17
     86  1070		       f0 0b		      beq	is_a
     87  1072		       c9 12		      cmp	#18
     88  1074		       f0 0c		      beq	is_d
     89  1076		       c9 21		      cmp	#33
     90  1078		       f0 13		      beq	exit_prg
     91  107a		       4c 68 10 	      jmp	loop
     92  107d
     93  107d				   is_a
     94  107d							;    lda     #65
     95  107d		       a9 01		      lda	#01
     96  107f		       4c 87 10 	      jmp	printchar
     97  1082				   is_d
     98  1082							;    lda     #68
     99  1082		       a9 04		      lda	#04
    100  1084		       4c 87 10 	      jmp	printchar
    101  1087
    102  1087				   printchar
    103  1087							;    jsr     CHROUT
    104  1087		       8d 00 1e 	      STA	$1e00
    105  108a		       4c 68 10 	      jmp	loop
    106  108d
    107  108d
    108  108d				   exit_prg
    109  108d		       60		      rts
    110  108e
